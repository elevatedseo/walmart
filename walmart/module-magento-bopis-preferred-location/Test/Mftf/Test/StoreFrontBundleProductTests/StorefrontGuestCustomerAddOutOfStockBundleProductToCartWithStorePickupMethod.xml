<?xml version="1.0" encoding="UTF-8"?>
<!--
/**
 * @copyright Walmart Inc. All Rights Reserved.
 * @author    Blue Acorn iCi <code@blueacorn.com>
 */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="StorefrontGuestCustomerAddOutOfStockBundleProductToCartWithStorePickupMethod">
        <annotations>
            <stories value="As a store owner I would like to ensure that out of stock products can not be selected for in store pickup at locations that do not have any stock."/>
            <title value="Attempt to add out of stock product to cart using store pickup method"/>
            <description value="1) Create two sources and one stock and assign sources to stock. 2) Create category. 3) Create a bundle product. 4) Assign sources to product and set the quantiry 0 for the first source. 5) Go to the product page on frontend. 6) Select Store Pickup method and select store. 7) Add the product to cart. 8) Check that product is not available message is displayed on mini cart. 9) Disable created sources. 10) Delete product and category created."/>
            <testCaseId value="WMTP-567"/>
            <severity value="MAJOR"/>
            <group value="checkout"/>
        </annotations>

        <before>
            <!--Enable BOPIS Module and Instore Pickup before start testing -->
            <magentoCLI command="config:set {{WCTEnabled.path}} {{WCTEnabled.value}}" stepKey="enableModule"/>
            <magentoCLI command="config:set {{WCTInstorePickupEnabled.path}} {{WCTInstorePickupEnabled.value}}" stepKey="enableInstorePickup"/>

            <!--Create a source and stock and assign source to stock -->
            <createData entity="BopisStorePickupEnabledSource" stepKey="customSource1"/>
            <createData entity="BopisStorePickupEnabledSource" stepKey="customSource2"/>
            <createData entity="BasicMsiStock1" stepKey="customStock"/>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginToAdminArea"/>
            <waitForPageLoad stepKey="waitForDashboardLoad"/>

            <comment userInput="Assign source and sales channel to stock." stepKey="assignSourceToStockComment"/>
            <amOnPage url="{{AdminManageStockPage.url}}" stepKey="navigateToStockListPage"/>
            <waitForPageLoad time="30" stepKey="waitForStockGridLoad"/>
            <actionGroup ref="SearchAdminDataGridByKeywordActionGroup" stepKey="searchCustomStockByName">
                <argument name="keyword" value="$$customStock.stock[name]$$"/>
            </actionGroup>
            <click selector="{{AdminGridRow.editByValue($$customStock.stock[name]$$)}}" stepKey="clickEditCustomStock"/>
            <waitForPageLoad time="30" stepKey="waitForStockEditPageLoad"/>
            <selectOption selector="{{AdminEditStockSalesChannelsSection.websites}}" userInput="Main Website" stepKey="selectWebsiteAsSalesChannelForCustomStock"/>

            <click selector="{{AdminEditStockSourcesSection.assignSources}}" stepKey="clickOnAssignSources1"/>
            <actionGroup ref="SearchAdminDataGridByKeywordActionGroup" stepKey="searchCustomSource1ByName">
                <argument name="keyword" value="$$customSource1.source[name]$$"/>
            </actionGroup>
            <click selector="{{AdminGridRow.checkboxByValue($$customSource1.source[name]$$)}}" stepKey="selectCustomSource1ForCustomStock"/>
            <click selector="{{AdminManageSourcesGridControls.done}}" stepKey="clickOnDoneCustomSourceAssignment1"/>
            <click selector="{{AdminEditStockSourcesSection.assignSources}}" stepKey="clickOnAssignSources2"/>
            <actionGroup ref="SearchAdminDataGridByKeywordActionGroup" stepKey="searchCustomSource2ByName">
                <argument name="keyword" value="$$customSource2.source[name]$$"/>
            </actionGroup>
            <click selector="{{AdminGridRow.checkboxByValue($$customSource2.source[name]$$)}}" stepKey="selectCustomSource2ForCustomStock"/>
            <click selector="{{AdminManageSourcesGridControls.done}}" stepKey="clickOnDoneCustomSourceAssignment2"/>

            <click selector="{{AdminGridMainControls.saveAndContinue}}" stepKey="saveCustomStock"/>

            <!--Set Display Cart Summary to display items quantities -->
            <magentoCLI command="config:set {{DisplayItemsQuantities.path}} {{DisplayItemsQuantities.value}}" stepKey="setDisplayCartSummary"/>

            <!-- Create category -->
            <createData entity="SimpleSubCategory" stepKey="category1"/>

            <!-- Create  simple product 1 -->
            <createData entity="SimpleProductHomeDeliveryAndStorePickup" stepKey="simpleProduct1">
                <requiredEntity createDataKey="category1"/>
            </createData>

            <!-- Create  simple product 2 -->
            <createData entity="SimpleProductHomeDeliveryAndStorePickup" stepKey="simpleProduct2">
                <requiredEntity createDataKey="category1"/>
            </createData>
        </before>
        <after>
            <actionGroup ref="DisableSourceActionGroup" stepKey="disableFirstCreatedSource1">
                <argument name="sourceCode" value="$$customSource1.source[source_code]$$"/>
            </actionGroup>
            <actionGroup ref="DisableSourceActionGroup" stepKey="disableFirstCreatedSource2">
                <argument name="sourceCode" value="$$customSource2.source[source_code]$$"/>
            </actionGroup>
            <deleteData createDataKey="simpleProduct1" stepKey="deleteProduct1"/>
            <deleteData createDataKey="simpleProduct2" stepKey="deleteProduct2"/>
            <deleteData createDataKey="category1" stepKey="deleteCategory1"/>
            <magentoCLI command="config:set {{DisplayItemsQuantities.path}} {{DisplayItemsQuantities.value}}" stepKey="resetDisplayCartSummary"/>
            <!--Disable BOPIS Module after testing -->
            <magentoCLI command="config:set {{WCTEnabled.path}} 0" stepKey="disableModule"/>
            <magentoCLI command="config:set {{WCTInstorePickupEnabled.path}} 0" stepKey="disableInstorePickup"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutFromAdminArea"/>
        </after>

        <!-- Assign source to simple product 1. -->
        <amOnPage url="{{AdminProductEditPage.url($$simpleProduct1.id$$)}}" stepKey="openProductEditPageToAssignSources1"/>

        <waitForPageLoad time="60" stepKey="waitForAssignSourcesToProduct1"/>
        <actionGroup ref="AssignSourceToProductActionGroup" stepKey="assignFirstSourceToProduct1">
            <argument name="sourceCode" value="$$customSource1.source[source_code]$$"/>
        </actionGroup>
        <actionGroup ref="AssignSourceToProductActionGroup" stepKey="assignSecondSourceToProduct1">
            <argument name="sourceCode" value="$$customSource2.source[source_code]$$"/>
        </actionGroup>
        <fillField selector="{{AdminProductSourcesGrid.rowQty('1')}}" userInput="0" stepKey="setProduct1Quantity1"/>
        <fillField selector="{{AdminProductSourcesGrid.rowQty('2')}}" userInput="100" stepKey="setProduct1Quantity2"/>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct1"/>
        <waitForPageLoad stepKey="waitForProductSave1"/>
        <seeElement selector="{{AdminProductMessagesSection.successMessage}}" stepKey="seeSaveProductMessage1"/>

        <!-- Assign source to simple product 2. -->
        <amOnPage url="{{AdminProductEditPage.url($$simpleProduct2.id$$)}}" stepKey="openProductEditPageToAssignSources2"/>

        <waitForPageLoad time="60" stepKey="waitForAssignSourcesToProduct2"/>
        <actionGroup ref="AssignSourceToProductActionGroup" stepKey="assignFirstSourceToProduct2">
            <argument name="sourceCode" value="$$customSource1.source[source_code]$$"/>
        </actionGroup>
        <actionGroup ref="AssignSourceToProductActionGroup" stepKey="assignSecondSourceToProduct2">
            <argument name="sourceCode" value="$$customSource2.source[source_code]$$"/>
        </actionGroup>
        <fillField selector="{{AdminProductSourcesGrid.rowQty('1')}}" userInput="0" stepKey="setProduct2Quantity1"/>
        <fillField selector="{{AdminProductSourcesGrid.rowQty('2')}}" userInput="100" stepKey="setProduct2Quantity2"/>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct2"/>
        <waitForPageLoad stepKey="waitForProductSave2"/>
        <seeElement selector="{{AdminProductMessagesSection.successMessage}}" stepKey="seeSaveProductMessage2"/>

        <!-- Create new bundle product -->
        <actionGroup ref="GoToSpecifiedCreateProductPageActionGroup" stepKey="createBundleProduct">
            <argument name="productType" value="bundle"/>
        </actionGroup>

        <!-- Fill all main fields -->
        <actionGroup ref="FillMainBundleProductFormActionGroup" stepKey="fillMainProductFields"/>

        <scrollTo selector="{{AdminProductFormBundleSection.contentDropDown}}" stepKey="scrollToBundleSection"/>
        <selectOption userInput="Separately" selector="{{AdminProductFormBundleSection.shipmentType}}" stepKey="selectSeparately"/>

        <!-- Add first bundle option to the product -->
        <actionGroup ref="AddBundleOptionWithTwoProductsActionGroup" stepKey="addFirstBundleOption">
            <argument name="x" value="0"/>
            <argument name="n" value="1"/>
            <argument name="prodOneSku" value="$simpleProduct1.sku$"/>
            <argument name="prodTwoSku" value="$simpleProduct2.sku$$"/>
            <argument name="optionTitle" value="{{RadioButtonsOption.title}}"/>
            <argument name="inputType" value="{{RadioButtonsOption.type}}"/>
        </actionGroup>

        <!-- Save product form -->
        <actionGroup ref="SaveProductFormActionGroup" stepKey="saveWithThreeOptions"/>

        <!--Open Product Page-->
        <actionGroup ref="StorefrontOpenProductPageActionGroup" stepKey="openStorefrontProductPage">
            <argument name="productUrl" value="{{BundleProduct.urlKey}}"/>
        </actionGroup>

        <!-- select customize and add to cart-->
        <actionGroup ref="StorefrontSelectCustomizeAndAddToTheCartButtonActionGroup" stepKey="clickAddToCart">
            <argument name="productUrl" value="{{BundleProduct.name}}"/>
        </actionGroup>

        <!-- Select Store Pickup method and select store. -->
        <actionGroup ref="SelectStorePickupAndStoreFromStorefrontProductPageActionGroup" stepKey="selectStorePickupAndStore" >
            <argument name="sourceCode" value="$$customSource1.source[source_code]$$"/>
            <argument name="sourceName" value="$$customSource1.source[name]$$"/>
        </actionGroup>

        <!-- Add bundle to cart -->
        <checkOption selector="{{StorefrontBundledSection.checkboxOptionThreeProducts(RadioButtonsOption.title, '1')}}" stepKey="selectOption2Product1"/>
        <actionGroup ref="StorefrontEnterProductQuantityAndAddToTheCartActionGroup" stepKey="enterProductQuantityAndAddToTheCart">
            <argument name="quantity" value="1"/>
        </actionGroup>

        <!-- Open Mini Cart -->
        <actionGroup ref="StorefrontOpenMiniCartActionGroup" stepKey="openMiniCart"/>

        <!-- Assert product is not available message in Mini Cart -->
        <actionGroup ref="StorefrontAssertMiniCartItemOutOfStockActionGroup" stepKey="assertProductOutOfStockTextInMiniCart">
            <argument name="productOutOfStockText" value="The requested qty is not available"/>
        </actionGroup>
    </test>
</tests>

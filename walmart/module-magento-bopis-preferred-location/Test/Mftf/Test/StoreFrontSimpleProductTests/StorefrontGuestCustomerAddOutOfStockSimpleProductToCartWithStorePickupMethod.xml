<?xml version="1.0" encoding="UTF-8"?>
<!--
/**
 * @copyright Walmart Inc. All Rights Reserved.
 * @author    Blue Acorn iCi <code@blueacorn.com>
 */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="StorefrontGuestCustomerAddOutOfStockSimpleProductToCartWithStorePickupMethod">
        <annotations>
            <stories value="As a store owner I would like to ensure that out of stock products can not be selected for in store pickup at locations that do not have any stock."/>
            <title value="Attempt to add out of stock product to cart using store pickup method"/>
            <description value="1) Create two sources and one stock and assign sources to stock. 2) Create category. 3) Create a simple product. 4) Assign sources to product and set the quantiry 0 for the first source. 5) Go to the product page on frontend. 6) Select Store Pickup method and select store. 7) Check that the first store is disabled. 8) Check that the stock status says Out-of-Stock. 9) Disable created sources. 10) Delete product and category created."/>
            <testCaseId value="WMTP-547"/>
            <severity value="MAJOR"/>
            <group value="checkout"/>
        </annotations>

        <before>
            <!--Create a source and stock and assign source to stock -->
            <createData entity="BopisStorePickupEnabledSource" stepKey="customSource1"/>
            <createData entity="BopisStorePickupEnabledSource" stepKey="customSource2"/>

            <!--Enable BOPIS Module and Instore Pickup before start testing -->
            <magentoCLI command="config:set {{WCTEnabled.path}} {{WCTEnabled.value}}" stepKey="enableModule"/>
            <magentoCLI command="config:set {{WCTInstorePickupEnabled.path}} {{WCTInstorePickupEnabled.value}}" stepKey="enableInstorePickup"/>

            <createData entity="BasicMsiStock1" stepKey="customStock"/>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginToAdminArea"/>
            <waitForPageLoad stepKey="waitForDashboardLoad"/>

            <comment userInput="Assign source and sales channel to stock." stepKey="assignSourceToStockComment"/>
            <amOnPage url="{{AdminManageStockPage.url}}" stepKey="navigateToStockListPage"/>
            <waitForPageLoad time="30" stepKey="waitForStockGridLoad"/>
            <actionGroup ref="SearchAdminDataGridByKeywordActionGroup" stepKey="searchCustomStockByName">
                <argument name="keyword" value="$$customStock.stock[name]$$"/>
            </actionGroup>
            <click selector="{{AdminGridRow.editByValue($$customStock.stock[name]$$)}}" stepKey="clickEditCustomStock"/>
            <waitForPageLoad time="30" stepKey="waitForStockEditPageLoad"/>
            <selectOption selector="{{AdminEditStockSalesChannelsSection.websites}}" userInput="Main Website" stepKey="selectWebsiteAsSalesChannelForCustomStock"/>

            <click selector="{{AdminEditStockSourcesSection.assignSources}}" stepKey="clickOnAssignSources1"/>
            <actionGroup ref="SearchAdminDataGridByKeywordActionGroup" stepKey="searchCustomSource1ByName">
                <argument name="keyword" value="$$customSource1.source[name]$$"/>
            </actionGroup>
            <click selector="{{AdminGridRow.checkboxByValue($$customSource1.source[name]$$)}}" stepKey="selectCustomSource1ForCustomStock"/>
            <click selector="{{AdminManageSourcesGridControls.done}}" stepKey="clickOnDoneCustomSourceAssignment1"/>
            <click selector="{{AdminEditStockSourcesSection.assignSources}}" stepKey="clickOnAssignSources2"/>
            <actionGroup ref="SearchAdminDataGridByKeywordActionGroup" stepKey="searchCustomSource2ByName">
                <argument name="keyword" value="$$customSource2.source[name]$$"/>
            </actionGroup>
            <click selector="{{AdminGridRow.checkboxByValue($$customSource2.source[name]$$)}}" stepKey="selectCustomSource2ForCustomStock"/>
            <click selector="{{AdminManageSourcesGridControls.done}}" stepKey="clickOnDoneCustomSourceAssignment2"/>

            <click selector="{{AdminGridMainControls.saveAndContinue}}" stepKey="saveCustomStock"/>

            <!--Set Display Cart Summary to display items quantities -->
            <magentoCLI command="config:set {{DisplayItemsQuantities.path}} {{DisplayItemsQuantities.value}}" stepKey="setDisplayCartSummary"/>

            <!-- Create category -->
            <createData entity="SimpleSubCategory" stepKey="category1"/>

            <!-- Create  simple product -->
            <createData entity="SimpleProductHomeDeliveryAndStorePickup" stepKey="simpleProduct1">
                <requiredEntity createDataKey="category1"/>
            </createData>
        </before>
        <after>
            <actionGroup ref="DisableSourceActionGroup" stepKey="disableFirstCreatedSource">
                <argument name="sourceCode" value="$$customSource1.source[source_code]$$"/>
            </actionGroup>
            <deleteData createDataKey="simpleProduct1" stepKey="deleteProduct1"/>
            <deleteData createDataKey="category1" stepKey="deleteCategory1"/>
            <magentoCLI command="config:set {{DisplayItemsQuantities.path}} {{DisplayItemsQuantities.value}}" stepKey="resetDisplayCartSummary"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutFromAdminArea"/>
            <!--Disable BOPIS Module after testing -->
            <magentoCLI command="config:set {{WCTEnabled.path}} 0" stepKey="disableModule"/>
            <magentoCLI command="config:set {{WCTInstorePickupEnabled.path}} 0" stepKey="disableInstorePickup"/>
        </after>

        <!-- Search for the product and open in edit mode. -->
        <amOnPage url="{{AdminProductEditPage.url($$simpleProduct1.id$$)}}" stepKey="openProductEditPageToAssignSources"/>
        <!-- Assign source to product. -->
        <waitForPageLoad time="60" stepKey="waitForAssignSourcesToProduct"/>
        <actionGroup ref="AssignSourceToProductActionGroup" stepKey="assignFirstSourceToProduct">
            <argument name="sourceCode" value="$$customSource1.source[source_code]$$"/>
        </actionGroup>
        <actionGroup ref="AssignSourceToProductActionGroup" stepKey="assignSecondSourceToProduct">
            <argument name="sourceCode" value="$$customSource2.source[source_code]$$"/>
        </actionGroup>
        <fillField selector="{{AdminProductSourcesGrid.rowQty('1')}}" userInput="0" stepKey="setProductQuantity1"/>
        <fillField selector="{{AdminProductSourcesGrid.rowQty('2')}}" userInput="100" stepKey="setProductQuantity2"/>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForProductSave"/>
        <!-- See success message -->
        <seeElement selector="{{AdminProductMessagesSection.successMessage}}" stepKey="seeSaveProductMessage"/>

        <!-- Go to the product page -->
        <amOnPage url="{{StorefrontProductPage.url($$simpleProduct1.custom_attributes[url_key]$)}}" stepKey="amOnProduct1Page"/>

        <!-- Select Store Pickup method and check if product is out of stock for source 1. -->
        <actionGroup ref="SelectStorePickupAndCheckIfSourceIsOutOfStockFromStorefrontProductPageActionGroup" stepKey="selectStorePickupAndStore" >
            <argument name="sourceCode" value="$$customSource1.source[source_code]$$"/>
            <argument name="sourceName" value="$$customSource1.source[name]$$"/>
        </actionGroup>
    </test>
</tests>

<?xml version="1.0" encoding="UTF-8"?>
<!--
/**
 * @copyright Walmart Inc. All Rights Reserved.
 * @author    Blue Acorn iCi <code@blueacorn.com>
 */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="StorefrontGuestCustomerAddSimpleProductToCartWithStorePickupMethod">
        <annotations>
            <stories value="As a guest customer I would like to add a simple product to the cart with the store pickup option selected so that I know I have to pick up my product at a specific location."/>
            <title value="Add simple product to cart with home store pickup method"/>
            <description value="1) Create a source and stock and assign source to stock. 2) Create category. 3) Create a simple product. 4) Assign source to product. 5) Go to the product page on frontend. 6) Select Store Pickup method and select store. 7) Check that the store is selected. 8) Add simpleProduct to cart. 9) Open Mini Cart. 10) Assert Products Count in Mini Cart. 11) Assert Products Count on checkout page. 12) Disable created source. 13) Delete product and category created."/>
            <testCaseId value="WMTP-539"/>
            <severity value="MAJOR"/>
            <group value="checkout"/>
        </annotations>

        <before>
            <!--Create a source and stock and assign source to stock -->
            <createData entity="BopisStorePickupEnabledSource" stepKey="customSource"/>
            <createData entity="BasicMsiStock1" stepKey="customStock"/>

            <!--Enable BOPIS Module and Instore Pickup before start testing -->
            <magentoCLI command="config:set {{WCTEnabled.path}} {{WCTEnabled.value}}" stepKey="enableModule"/>
            <magentoCLI command="config:set {{WCTInstorePickupEnabled.path}} {{WCTInstorePickupEnabled.value}}" stepKey="enableInstorePickup"/>

            <actionGroup ref="AdminLoginActionGroup" stepKey="loginToAdminArea"/>
            <waitForPageLoad stepKey="waitForDashboardLoad"/>

            <comment userInput="Assign source and sales channel to stock." stepKey="assignSourceToStockComment"/>
            <amOnPage url="{{AdminManageStockPage.url}}" stepKey="navigateToStockListPage"/>
            <waitForPageLoad time="30" stepKey="waitForStockGridLoad"/>
            <actionGroup ref="SearchAdminDataGridByKeywordActionGroup" stepKey="searchCustomStockByName">
                <argument name="keyword" value="$$customStock.stock[name]$$"/>
            </actionGroup>
            <click selector="{{AdminGridRow.editByValue($$customStock.stock[name]$$)}}" stepKey="clickEditCustomStock"/>
            <waitForPageLoad time="30" stepKey="waitForStockEditPageLoad"/>
            <selectOption selector="{{AdminEditStockSalesChannelsSection.websites}}" userInput="Main Website" stepKey="selectWebsiteAsSalesChannelForCustomStock"/>
            <click selector="{{AdminEditStockSourcesSection.assignSources}}" stepKey="clickOnAssignSources"/>
            <actionGroup ref="SearchAdminDataGridByKeywordActionGroup" stepKey="searchCustomSourceByName">
                <argument name="keyword" value="$$customSource.source[name]$$"/>
            </actionGroup>
            <click selector="{{AdminGridRow.checkboxByValue($$customSource.source[name]$$)}}" stepKey="selectCustomSourceForCustomStock"/>
            <click selector="{{AdminManageSourcesGridControls.done}}" stepKey="clickOnDoneCustomSourceAssignment"/>
            <click selector="{{AdminGridMainControls.saveAndContinue}}" stepKey="saveCustomStock"/>

            <!--Set Display Cart Summary to display items quantities -->
            <magentoCLI command="config:set {{DisplayItemsQuantities.path}} {{DisplayItemsQuantities.value}}" stepKey="setDisplayCartSummary"/>

            <!--Clear config cache -->
            <magentoCLI command="cache:flush" arguments="config" stepKey="cleanConfigCache"/>

            <!-- Create category -->
            <createData entity="SimpleSubCategory" stepKey="category1"/>

            <!-- Create  simple product -->
            <createData entity="SimpleProductHomeDeliveryAndStorePickup" stepKey="simpleProduct1">
                <requiredEntity createDataKey="category1"/>
            </createData>
        </before>
        <after>
            <actionGroup ref="DisableSourceActionGroup" stepKey="disableFirstCreatedSource">
                <argument name="sourceCode" value="$$customSource.source[source_code]$$"/>
            </actionGroup>
            <deleteData createDataKey="simpleProduct1" stepKey="deleteProduct1"/>
            <deleteData createDataKey="category1" stepKey="deleteCategory1"/>
            <magentoCLI command="config:set {{DisplayItemsQuantities.path}} {{DisplayItemsQuantities.value}}" stepKey="resetDisplayCartSummary"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutFromAdminArea"/>
            <!--Disable BOPIS Module after testing -->
            <magentoCLI command="config:set {{WCTEnabled.path}} 0" stepKey="disableModule"/>
            <magentoCLI command="config:set {{WCTInstorePickupEnabled.path}} 0" stepKey="disableInstorePickup"/>
        </after>

        <!-- Search for the product and open in edit mode. -->
        <amOnPage url="{{AdminProductEditPage.url($$simpleProduct1.id$$)}}" stepKey="openProductEditPageToAssignSources"/>
        <!-- Assign source to product. -->
        <waitForPageLoad time="60" stepKey="waitForAssignSourcesToProduct"/>
        <actionGroup ref="AssignSourceToProductActionGroup" stepKey="assignFirstSourceToProduct">
            <argument name="sourceCode" value="$$customSource.source[source_code]$$"/>
        </actionGroup>
        <fillField selector="{{AdminProductSourcesGrid.rowQty('1')}}" userInput="100" stepKey="setProductQuantity"/>
        <click selector="{{AdminProductFormActionSection.saveButton}}" stepKey="saveProduct"/>
        <waitForPageLoad stepKey="waitForProductSave"/>
        <!-- See success message -->
        <seeElement selector="{{AdminProductMessagesSection.successMessage}}" stepKey="seeSaveProductMessage"/>

        <!-- Go to the product page -->
        <amOnPage url="{{StorefrontProductPage.url($$simpleProduct1.custom_attributes[url_key]$)}}" stepKey="amOnProduct1Page"/>

        <!-- Select Store Pickup method and select store. -->
        <actionGroup ref="SelectStorePickupAndStoreFromStorefrontProductPageActionGroup" stepKey="selectStorePickupAndStore" >
            <argument name="sourceCode" value="$$customSource.source[source_code]$$"/>
            <argument name="sourceName" value="$$customSource.source[name]$$"/>
        </actionGroup>

        <!-- Add simpleProduct1 to cart -->
        <actionGroup ref="AddProductWithQtyToCartFromStorefrontProductPageActionGroup" stepKey="addProduct1ToCart">
            <argument name="productName" value="$$simpleProduct1.name$$"/>
            <argument name="productQty" value="1"/>
        </actionGroup>

        <!-- Open Mini Cart -->
        <actionGroup ref="StorefrontOpenMiniCartActionGroup" stepKey="openMiniCart"/>

        <!-- Assert Products Count in Mini Cart -->
        <actionGroup ref="StorefrontAssertMiniCartItemCountActionGroup" stepKey="assertProductCountAndTextInMiniCart">
            <argument name="productCount" value="1"/>
            <argument name="productCountText" value="1 Item in Cart"/>
        </actionGroup>
        <!-- Assert Products Count on checkout page -->
        <actionGroup ref="StorefrontCheckoutAndAssertOrderSummaryDisplayActionGroup" stepKey="assertProductCountOnCheckoutPage">
            <argument name="itemsText" value="1 Item in Cart"/>
        </actionGroup>
    </test>
</tests>
